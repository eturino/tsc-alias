{"version":3,"file":"config-preparer.js","sourceRoot":"","sources":["../../src/helpers/config-preparer.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,gDAAgD;AAMhD,oCAAuD;AACvD,+BAAyE;AACzE,2BAAgC;AAChC,qCAAsC;AACtC,2CAA8C;AAE9C,SAAsB,aAAa,CACjC,UAAuC;IACrC,KAAK,EAAE,KAAK;IACZ,OAAO,EAAE,KAAK;IACd,cAAc,EAAE,SAAS;IACzB,MAAM,EAAE,SAAS;IACjB,SAAS,EAAE,SAAS;CACrB;;;QAED,MAAM,MAAM,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,IAAI,cAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAE7D,MAAM,UAAU,GAAG,CAAC,OAAO,CAAC,UAAU;YACpC,CAAC,CAAC,IAAA,cAAO,EAAC,OAAO,CAAC,GAAG,EAAE,EAAE,eAAe,CAAC;YACzC,CAAC,CAAC,CAAC,IAAA,iBAAU,EAAC,OAAO,CAAC,UAAU,CAAC;gBACjC,CAAC,CAAC,IAAA,cAAO,EAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,UAAU,CAAC;gBAC5C,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;QAEvB,MAAM,CAAC,MAAM,CAAC,IAAA,eAAU,EAAC,UAAU,CAAC,EAAE,wBAAwB,UAAU,EAAE,CAAC,CAAC;QAE5E,MAAM,EACJ,OAAO,GAAG,IAAI,EACd,MAAM,EACN,cAAc,EACd,KAAK,EACL,SAAS,EACT,gBAAgB,EAChB,OAAO,EACR,GAAG,IAAA,mBAAU,EAAC,UAAU,CAAC,CAAC;QAE3B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAE3B,IAAI,OAAO,CAAC,gBAAgB,IAAI,gBAAgB,EAAE;YAChD,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;SACjC;QAED,MAAM,OAAO,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,MAAM,CAAC;QACzC,IAAI,cAAc,IAAI,OAAO,KAAK,cAAc,EAAE;YAChD,MAAA,OAAO,CAAC,cAAc,oCAAtB,OAAO,CAAC,cAAc,GAAK,cAAc,EAAC;SAC3C;QAED,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,mCAAmC,CAAC,CAAC;QAE5D,MAAM,SAAS,GAAW,aAAa,CAAC,IAAA,cAAO,EAAC,UAAU,CAAC,CAAC,CAAC;QAG7D,MAAM,aAAa,GAAmB;YACpC,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,OAAO;YAChB,MAAM,EAAE,OAAO;YACf,SAAS,EAAE,SAAS;YACpB,OAAO,EAAE,aAAa,CAAC,IAAA,gBAAS,EAAC,SAAS,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;YAC5D,uBAAuB,EAAE,IAAA,eAAQ,EAAC,SAAS,CAAC;YAC5C,cAAc,EAAE,KAAK;YACrB,kBAAkB,EAAE,IAAI;YACxB,uBAAuB,EAAE,IAAI;YAC7B,SAAS,EAAE,IAAI,iBAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;SACzC,CAAC;QAEF,MAAM,MAAM,mCACP,aAAa,KAChB,MAAM,EAAE,MAAM,EACd,SAAS,EACP,MAAA,OAAO,CAAC,SAAS,mCAAI,gBAAQ,CAAC,cAAc,CAAC,aAAa,EAAE,KAAK,CAAC,EACpE,SAAS,EAAE,EAAE,GACd,CAAC;QAGF,MAAM,IAAA,2BAAe,EAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;QAC5D,OAAO,MAAM,CAAC;;CACf;AArED,sCAqEC","sourcesContent":["import * as normalizePath from 'normalize-path';\nimport {\n  IConfig,\n  IProjectConfig,\n  ReplaceTscAliasPathsOptions\n} from '../interfaces';\nimport { Output, PathCache, TrieNode } from '../utils';\nimport { basename, dirname, isAbsolute, normalize, resolve } from 'path';\nimport { existsSync } from 'fs';\nimport { loadConfig } from './config';\nimport { importReplacers } from './replacers';\n\nexport async function prepareConfig(\n  options: ReplaceTscAliasPathsOptions = {\n    watch: false,\n    verbose: false,\n    declarationDir: undefined,\n    output: undefined,\n    aliasTrie: undefined\n  }\n) {\n  const output = options.output ?? new Output(options.verbose);\n\n  const configFile = !options.configFile\n    ? resolve(process.cwd(), 'tsconfig.json')\n    : !isAbsolute(options.configFile)\n    ? resolve(process.cwd(), options.configFile)\n    : options.configFile;\n\n  output.assert(existsSync(configFile), `Invalid file path => ${configFile}`);\n\n  const {\n    baseUrl = './',\n    outDir,\n    declarationDir,\n    paths,\n    replacers,\n    resolveFullPaths,\n    verbose\n  } = loadConfig(configFile);\n\n  output.setVerbose(verbose);\n\n  if (options.resolveFullPaths || resolveFullPaths) {\n    options.resolveFullPaths = true;\n  }\n\n  const _outDir = options.outDir ?? outDir;\n  if (declarationDir && _outDir !== declarationDir) {\n    options.declarationDir ??= declarationDir;\n  }\n\n  output.assert(_outDir, 'compilerOptions.outDir is not set');\n\n  const configDir: string = normalizePath(dirname(configFile));\n\n  // config with project details and paths\n  const projectConfig: IProjectConfig = {\n    configFile: configFile,\n    baseUrl: baseUrl,\n    outDir: _outDir,\n    configDir: configDir,\n    outPath: normalizePath(normalize(configDir + '/' + _outDir)),\n    confDirParentFolderName: basename(configDir),\n    hasExtraModule: false,\n    configDirInOutPath: null,\n    relConfDirPathInOutPath: null,\n    pathCache: new PathCache(!options.watch)\n  };\n\n  const config: IConfig = {\n    ...projectConfig,\n    output: output,\n    aliasTrie:\n      options.aliasTrie ?? TrieNode.buildAliasTrie(projectConfig, paths),\n    replacers: []\n  };\n\n  // Import replacers.\n  await importReplacers(config, replacers, options.replacers);\n  return config;\n}\n"]}